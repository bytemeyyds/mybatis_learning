<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.hgq.mapper.UsersMapper">
<!--    定义代码片段-->
    <sql id="allColumns">
        id,username,birthday,sex,address
    </sql>

    <sql id="allColumnsWithoutId">
        username,birthday,sex,address
    </sql>


<!--    // 查询全部用户信息-->
<!--    List<Users> getAll();-->
    <select id="getAll" resultType="users">
        select <include refid="allColumns"></include>
        from users
    </select>

    <select id="getNameById" resultType="users">
        select <include refid="allColumns"></include>
        from users
        where id=#{id}
    </select>

    <select id="getInfoMoHu" resultType="users" parameterType="string">
        select <include refid="allColumns"></include>
        from users
        where username like '%${name}%'
    </select>

    <update id="update" parameterType="users">
        update users set username=#{username},birthday=#{birthday},sex=#{sex},address=#{address}
        where id=#{id}
    </update>

    <delete id="delete" parameterType="int">
        delete from users where id=#{id}
    </delete>

    <insert id="insert" parameterType="users">

        <selectKey  keyProperty="id" resultType="int" order="AFTER">
            select last_insert_id()
        </selectKey>

        insert into users (username,birthday,sex,address) values (#{username},#{birthday},#{sex},#{address})
    </insert>

    <select id="getInfoMoHu2" resultType="users" parameterType="string">
        select <include refid="allColumns"></include>
        from users
        where username like concat('%',#{name},'%')
    </select>


<!--    如果接口中的方法中的参数超过一个，则不用写parameterType
        List<Users> getByNameOrAddress(
            @Param("columName")
            String columnName,
            @Param("columnValue")
            String columnValue);
-->
    <select id="getByNameOrAddress" resultType="users">
        select <include refid="allColumns"></include>
        from users
        where ${columnName} like concat('%',#{columnValue},'%')
    </select>


<!--    //按指定的条件进行多条件查询-->
<!--    List<Users> getByConditions(Users users);

        根据实体类中的成员变量是否有值来决定是否添加条件
        private Integer id;
        private String username;
        private Date birthday;
        private String sex;
        private String address;

-->

    <select id="getByConditions" parameterType="users" resultType="users">
        select <include refid="allColumns"></include>
        from users
        <where>
            <if test="username != null and username !=''">
                and username like concat('%',#{username},'%')
            </if>
            <if test="birthday != null">
                and birthday = #{birthday}
            </if>
            <if test="sex != null and sex != ''">
                and sex = #{sex}
            </if>
            <if test="address != null and address != ''">
                and address like concat('%',#{address},'%')
            </if>
        </where>

    </select>


<!--    //有选择的更新-->
<!--    int updateBySet(Users users);-->

    <update id="updateBySet" parameterType="users">
        update users
        <set>
            <if test="username != null and username !=''">
                username = #{username},
            </if>
            <if test="birthday != null">
                birthday = #{birthday},
            </if>
            <if test="sex != null and sex != ''" >
                sex = #{sex},
            </if>
            <if test="address != null and username !=''">
                address = #{address},
            </if>

        </set>
        where id=#{id}
    </update>

<!--    //查询指定id的用户信息-->
<!--    List<Users> getByIds(Integer[] arr);-->
    <select id="getByIds" resultType="users">
        select <include refid="allColumns"></include>
        from users
        where id in
            <foreach collection="array" item="id" separator="," open="(" close=")">
                #{id}
            </foreach>
    </select>

<!--    //批量删除-->
<!--    int deleteByIds(Integer[] arr);-->
    <delete id="deleteByIds">
        delete from users
        where id in
            <foreach collection="array" item="id" separator="," open="(" close=")">
                #{id}
            </foreach>
    </delete>

<!--    //批量增加-->
<!--    int insertBatch(Users[] users);-->
    <insert id="insertBatch">
        insert into users(<include refid="allColumnsWithoutId"></include>)
        values 
            <foreach collection="list" item="user" separator=",">
                (#{user.username},#{user.birthday},#{user.sex},#{user.address})
            </foreach>


    </insert>

<!--     //查询指定日期范围内的用户信息.
    List<Users> getByBirthday(Date begin,Date end);-->
    <select id="getByBirthday" resultType="users">
        select <include refid="allColumns"></include>
        from users
        where birthday between #{arg0} and #{arg1}
    </select>

    <!--
       //入参是map
    List<Users> getByMap(Map map);
    #{birthdayBegin}:就是map中的key
    -->
    <select id="getByMap" resultType="users" >
        select <include refid="allColumns"></include>
        from users
        where birthday between #{birthdayBegin} and #{birthdayEnd}
    </select>


    <!--
       //返回值是map(一行)
    Map getReturnMap(Integer id);
    -->
    <select id="getReturnMap" parameterType="int" resultType="map">
        select username nam,address a
        from users
        where id=#{i}
    </select>

    <!--
     //返回多行的map
   List<Map> getMulMap();
   -->
    <select id="getMulMap" resultType="map">
        select username,address
        from users
    </select>
</mapper>